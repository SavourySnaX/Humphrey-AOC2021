using System::Types
using Support::Types
using Support::IntList

[C_CALLING_CONVENTION]
LoadTextFile:(filename:*Int8)(data:*Int8)

IsAsciiNumberCharacter:(char:Int8)(answer:bit)=
{
    answer = (char>=0x30) && (char<=0x39);
}

IsAsciiLowerCaseCharacter:(char:Int8)(answer:bit)=
{
    answer = (char>=0x61) && (char<=0x7A);
}

# Handles bases 1-10 for now
LoadIntFile:(filename:*Int8,base:Int32)(array:*Int32,cnt:Int32)=
{
    list:=LoadIntFileAsList(filename,base).list;

    cnt=list.size;
    array=IntListToArray(list).array;
}

LoadIntFileAsList:(filename:*Int8,base:Int32)(list:IntList)=
{
    nullTerminated:=LoadTextFile(filename);
    # Absolute donkey doo

    list=BeginIntList().list;
    numInts:Int32=0;
    tInt:Int32=0;
    lastValid:=Bool.False;
    while ((*nullTerminated)!=0)
    {
        char:=*nullTerminated;
        if (IsAsciiNumberCharacter(char))
        {
            lastValid=Bool.True;
            tInt=tInt*base;
            tInt=tInt+(char-0x30);
        }
        else
        {
            if (lastValid==Bool.True)
            {
                AppendIntList(&list,tInt);
                tInt=0;
            }
            lastValid=Bool.False;
        }
        nullTerminated++;
    }
    if (lastValid==Bool.True)
    {
        AppendIntList(&list,tInt);
        tInt=0;
    }
}
